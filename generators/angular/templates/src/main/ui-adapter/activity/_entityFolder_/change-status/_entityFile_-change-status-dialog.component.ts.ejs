<%
const enumImports = this.generateEntityClientEnumImportsForApplication(fields);
const hasStatusField = this.hasStatusField(fields, this)
%>
import { Component, inject, HostListener } from '@angular/core';
import { finalize } from 'rxjs/operators';

import { SharedDialogModule } from 'avanng/shared';
import { cast } from 'avanng/common/core';
import { DialogComponent } from 'avanng/dialog';
import { Mediator } from 'avanng/domain';

import { I<%= entityAngularName %> } from '@domain/model/<%= entityFileName %>.model';
<%_ enumImports.forEach((importedPath, importedType) => { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
<%_ }); _%>
import { <%= entityAngularName %>ChangeStatusCommand } from '@application/command/<%= entityFolderName %>/<%= entityFileName %>-change-status.command';
import { <%= entityAngularName %>Definition } from "../<%= entityFileName %>.df";

export interface <%= entityAngularName %>ChangeStatusDialogData {
    <%= entityInstance %>: I<%= entityAngularName %> | null | undefined;
    status: keyof typeof <%= hasStatusField.tsType %>;
}

@Component({
  standalone: true,
  templateUrl: './<%= entityFileName %>-change-status-dialog.component.html',
  imports: [ SharedDialogModule ],
})
export class <%= entityAngularName %>ChangeStatusDialogComponent extends DialogComponent {
  <%= entityInstance %>?: I<%= entityAngularName %> | null;
  status!: keyof typeof <%= hasStatusField.tsType %>;

  df = inject(<%= entityAngularName %>Definition);
  mediator = inject(Mediator);

  shortcuts = [
    { key: 'Alt+Y', command: () => this.confirmChangeStatus() },
    { key: ['Alt+Q', 'Alt+N'], command: () => this.close() },
  ];

  resolve(): void {
    const data = cast<<%= entityAngularName %>ChangeStatusDialogData>(this.dialogData);

    if (!data?.<%= entityInstance %> || !(data.status in this.df.Enum.<%= hasStatusField.tsType %>)) {
      this.close();
      return;
    }

    this.<%= entityInstance %> = data.<%= entityInstance %>;
    this.status = data.status;
  }

    confirmChangeStatus(): void {
    if (this.<%= entityInstance %>?.<%= primaryKey.name %>) {
      this.inProgress = true;
      this.subs.sink = this.mediator
        .send(new <%= entityAngularName %>ChangeStatusCommand({ ...this.<%= entityInstance %>, newStatus: this.status }))
        .pipe(finalize(() => (this.inProgress = false)))
        .subscribe(() => {
          this.alertService.addSuccess(`<%- i18nKeyPrefix %>.changeStatus.${this.status}.submitted`);
          this.close('changed');
        });
    }
  }
}
