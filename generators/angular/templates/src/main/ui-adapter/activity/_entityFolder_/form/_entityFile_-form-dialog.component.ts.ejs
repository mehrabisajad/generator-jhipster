<%
const enumImports = this.generateEntityClientEnumImportsForApplication(fields);
const hasBooleanField = this.hasBooleanField(fields);
%>
import { Component, inject } from '@angular/core';
import { Observable } from "rxjs";
import { tap } from 'rxjs/operators';

import { DialogSkeletonComponent } from "avanng/dialog-skeleton";
import { DialogComponent } from 'avanng/dialog';
import { Mediator } from 'avanng/domain';
import { cast } from 'avanng/common/core';
import { FormType } from "avanng/forms";

import { I<%= entityAngularName %>, <%= entityAngularName %> } from '@domain/model/<%= entityFileName %>.model';
<%_ enumImports.forEach((importedPath, importedType) => { _%>
    import { <%- importedType %> } from '<%- importedPath %>';
<%_ }); _%>
import { <%= entityAngularName %>FindByIdQuery } from '@application/query/<%= entityFolderName %>/<%= entityFileName %>-find-by-id.query';
import { <%= entityAngularName %>FormComponent } from './<%= entityFileName %>-form.component';

export interface <%= entityAngularName %>DialogData {
  <%= entityInstance %>: I<%= entityAngularName %> | null | undefined;
  type?: FormType;
}

@Component({
  standalone: true,
  template: `
    @if (inProgress) {
      <nga-dialog-skeleton className="col-12 sm:col-11 max-w-70rem" (onClose)="close()"
                           [itemCount]="<%= fields.length %>"/>
    } @else {
      <<%= jhiPrefixDashed %>-<%= entityFileName %>-form
        [item]="<%= entityInstance %>"
        [type]="type"
        (onClose)="close($event)"
        [useInput]="true"
        [isDialog]="true"/>
    }
  `,
  imports: [DialogSkeletonComponent, <%= entityAngularName %>FormComponent],
})
export class <%= entityAngularName %>FormDialogComponent extends DialogComponent {
  <%= entityInstance %>?: I<%= entityAngularName %> | null;
  type: FormType = FormType.NEW;

  mediator = inject(Mediator);

  resolve(): void {
    const data = cast<<%= entityAngularName %>DialogData>(this.dialogData);

    this.type = data?.type ?? FormType.NEW;
    if (this.type !== FormType.NEW) {
      this.inProgress = true;
      if (data?.<%= entityInstance %>?.id) {
        this.subs.sink = this.mediator
          .send(new <%= entityAngularName %>FindByIdQuery(data.<%= entityInstance %>.id))
          .pipe(tap(() => (this.inProgress = false)))
          .subscribe({
            next: res => (this.<%= entityInstance %> = res ?? new <%= entityAngularName %>()),
            error: () => this.close(),
          });
      } else {
        this.close();
      }
    } else {
      this.<%= entityInstance %> = data?.<%= entityInstance %> ?? new <%= entityAngularName %>();
    }
  }

}
